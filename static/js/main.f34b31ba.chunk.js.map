{"version":3,"sources":["assets/logo.jpeg","firebase/config.js","firebase/provider.js","pages/form.js","pages/submissions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseContext","createContext","children","firebase","app","database","apps","length","initializeApp","Provider","value","Form","useContext","useState","phone","setPhone","name","setName","submission","setSubmission","content","setContent","isSubmitted","setIsSubmitted","btnDisabled","setBtnDisabled","entriesRef","ref","child","Container","maxWidth","Box","my","Card","Typography","align","variant","Grid","container","direction","className","justify","alignItems","alt","src","logo","FormControl","InputLabel","htmlFor","Input","onChange","e","target","inputProps","style","fontSize","aria-describedby","maxLength","FormHelperText","id","editorState","onContentStateChange","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","Button","disabled","onClick","alert","undefined","blocks","text","confirm","once","snapshot","exists","update","color","Submissions","loading","setLoading","data","setData","useEffect","then","val","convertBlocks","forEach","push","entityRanges","markup","phoneNumber","dangerouslySetInnerHTML","__html","draftToHtml","renderBlocks","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f34b31ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.17b572d4.jpeg\";","export const firebaseConfig = {\n  apiKey: \"AIzaSyCjz7awslZ-XHUaQHTs84rPxSW8MgJ9ISA\",\n  authDomain: \"the-scribble-squad.firebaseapp.com\",\n  databaseURL: \"https://the-scribble-squad.firebaseio.com\",\n  projectId: \"the-scribble-squad\",\n  storageBucket: \"the-scribble-squad.appspot.com\",\n  messagingSenderId: \"1028406333441\",\n  appId: \"1:1028406333441:web:2c5b4b6b52f5f702217000\",\n  measurementId: \"G-GC8868RNX3\",\n};\n","import React, { createContext, useEffect } from \"react\";\nimport { firebaseConfig } from \"./config\";\nimport app from \"firebase/app\";\nimport \"firebase/database\";\n\n// we create a React Context, for this to be accessible\n// from a component later\nconst FirebaseContext = createContext(null);\nexport { FirebaseContext };\n\nexport default ({ children }) => {\n  let firebase = {\n    app: null,\n    database: null,\n  };\n\n  // check if firebase app has been initialized previously\n  // if not, initialize with the config we saved earlier\n  if (!app.apps.length) {\n    app.initializeApp(firebaseConfig);\n    firebase = {\n      app: app,\n      database: app.database(),\n    };\n  }\n\n  return (\n    <FirebaseContext.Provider value={firebase}>\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { FirebaseContext } from \"./../firebase/provider\";\nimport { useContext } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport logo from \"./../assets/logo.jpeg\";\nimport \"./../App.css\";\nimport {\n  Card,\n  Input,\n  Grid,\n  FormControl,\n  InputLabel,\n  FormHelperText,\n  Typography,\n  Button,\n  TextField,\n} from \"@material-ui/core\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nexport const Form = () => {\n  const { database } = useContext(FirebaseContext);\n  const [phone, setPhone] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [submission, setSubmission] = useState(null);\n  const [content, setContent] = useState(null);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [btnDisabled, setBtnDisabled] = useState(false);\n  const dbRef = database.ref();\n  const entriesRef = dbRef.child(\"entries\");\n  const addEntry = () => {\n    setBtnDisabled(true);\n    if (name === \"\") {\n      alert(\"Name cannot be blank!\");\n      setBtnDisabled(false);\n      return;\n    }\n    if (phone === \"\") {\n      alert(\"Phone number cannot be blank!\");\n      setBtnDisabled(false);\n      return;\n    }\n    if (\n      content === null ||\n      content.blocks === undefined ||\n      content.blocks.length === 0 ||\n      content.blocks[0].text === \"\"\n    ) {\n      alert(\"Story cannot be blank!\");\n      return;\n    }\n    // eslint-disable-next-line no-restricted-globals\n    const isConfirmed = confirm(\"Are you sure?\");\n    if (isConfirmed) {\n      entriesRef.child(`${phone}`).once(\"value\", (snapshot) => {\n        if (snapshot.exists()) {\n          alert(\"Already submitted!\");\n          setBtnDisabled(false);\n          return;\n        } else {\n          entriesRef.update({\n            [phone]: { name, phone, blocks: content.blocks },\n          });\n          setIsSubmitted(true);\n        }\n      });\n    }\n  };\n  return isSubmitted ? (\n    <Container maxWidth=\"md\">\n      <Box my={4}>\n        <Card>\n          <Typography align=\"center\" variant=\"h2\">\n            Your submission has been recorded\n          </Typography>\n        </Card>\n      </Box>\n    </Container>\n  ) : (\n    <Container maxWidth=\"md\">\n      <Box my={4}>\n        <Card>\n          <Grid\n            container\n            direction=\"column\"\n            className=\"container\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Typography align=\"center\" variant=\"h4\">\n              Write here, write now!\n            </Typography>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-around\"\n              alignItems=\"center\"\n            >\n              <img alt=\"The Scribble Squad Logo\" src={logo}></img>\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-around\"\n              alignItems=\"center\"\n            >\n              <FormControl>\n                <InputLabel htmlFor=\"my-input\">Name</InputLabel>\n                <Input\n                  onChange={(e) => setName(e.target.value)}\n                  inputProps={{\n                    style: { fontSize: 25 },\n                  }}\n                  aria-describedby=\"my-helper-text\"\n                />\n              </FormControl>\n              <FormControl>\n                <InputLabel htmlFor=\"my-input\">Phone number</InputLabel>\n                <Input\n                  onChange={(e) => setPhone(e.target.value)}\n                  inputProps={{\n                    style: { fontSize: 25 },\n                    maxLength: 10,\n                  }}\n                  aria-describedby=\"my-helper-text\"\n                />\n                <FormHelperText id=\"my-helper-text\">\n                  We'll never share your phone number.\n                </FormHelperText>\n              </FormControl>\n            </Grid>\n            <div className=\"mainContainer\">\n              <Typography align=\"center\" variant=\"h5\">\n                Your story\n              </Typography>\n              <Editor\n                editorState={submission}\n                onContentStateChange={setContent}\n                toolbarClassName=\"toolbarClassName\"\n                wrapperClassName=\"wrapperClassName\"\n                editorClassName=\"editorClassName\"\n                onEditorStateChange={setSubmission}\n              />\n            </div>\n            <Button\n              disabled={btnDisabled}\n              onClick={addEntry}\n              color=\"primary\"\n              variant=\"contained\"\n            >\n              Submit!\n            </Button>\n          </Grid>\n        </Card>\n      </Box>\n    </Container>\n  );\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { convertFromRaw, Editor } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport { FirebaseContext } from \"../firebase/provider\";\nimport { Card, Container, Box, Typography, Grid } from \"@material-ui/core\";\n\nexport const Submissions = () => {\n  const { database } = useContext(FirebaseContext);\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    const dbRef = database.ref();\n    const entriesRef = dbRef.child(\"entries\");\n    entriesRef.once(\"value\").then((snapshot) => {\n      setData(snapshot.val());\n      setLoading(false);\n    });\n  }, []);\n\n  const convertBlocks = (e) => {\n    const blocks = [];\n    e.forEach((e) => {\n      blocks.push({ ...e, entityRanges: [] });\n    });\n    return blocks;\n  };\n  const convertBlockToHTML = (blocks) => {\n    return draftToHtml({ blocks });\n  };\n  const renderBlocks = () => {\n    const markup = [];\n    for (let phoneNumber in data) {\n      markup.push(\n        <Container maxWidth=\"md\">\n          <Box my={4}>\n            <Card>\n              <Typography align=\"center\" variant=\"h4\">\n                {data[phoneNumber].name} <br />\n              </Typography>\n              <Typography align=\"center\" variant=\"h5\">\n                {phoneNumber}\n              </Typography>\n              <Box my={5}>\n                <Grid\n                  container\n                  direction=\"column\"\n                  className=\"container\"\n                  justify=\"space-between\"\n                  alignItems=\"center\"\n                >\n                  <Container\n                    dangerouslySetInnerHTML={{\n                      __html: convertBlockToHTML(\n                        convertBlocks(data[phoneNumber].blocks)\n                      ),\n                    }}\n                  ></Container>\n                </Grid>\n              </Box>\n            </Card>\n          </Box>\n        </Container>\n      );\n    }\n    // const markup = data.map((d) => <div>{d.name}</div>);\n    return markup;\n  };\n  // const rawContentState = {\n  //   blocks: convertBlocks(data.entries[9001522059].blocks),\n  // };\n  // // console.log(rawContentState);\n  // const markup = draftToHtml(rawContentState);\n  // console.log(markup);\n  return loading ? <h1>Loading....</h1> : renderBlocks();\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Form } from \"./pages/form\";\nimport { Submissions } from \"./pages/submissions\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <div>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Route exact path={`/`} component={Form}></Route>\n        <Route path={`/submissions`} component={Submissions}></Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport FirebaseProvider from \"./firebase/provider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseProvider>\n      <App />\n    </FirebaseProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}